{"version":3,"sources":["components/Groups/Groups.tsx","components/Transactions/Transactions.tsx","components/Settings/Settings.tsx","components/Navigation/Panels.tsx","components/Navigation/NavigationBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Groups","Transactions","Settings","Panels","props","React","Children","toArray","children","index","NavigationBar","makeStyles","root","flexGrow","useState","selectedValue","setSelectedValue","Paper","Tabs","value","onChange","evt","indicatorColor","textColor","centered","Tab","label","App","useEffect","script","document","createElement","async","defer","src","body","appendChild","className","id","data-client_id","data-login_uri","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAEaA,EAAmB,WAC5B,OAAO,wECDEC,EAAyB,WAClC,OAAO,6DCDEC,EAAqB,WAC9B,OAAO,4DCGEC,EAA8C,SAACC,GACxD,OAAO,oCAAGC,IAAMC,SAASC,QAAQH,EAAMI,UAAUJ,EAAMK,SCa9CC,GAVKC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAQyB,WAAO,IAAD,EACCC,mBAAS,GADV,mBAClCC,EADkC,KACnBC,EADmB,KAGzC,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAOJ,EACPK,SAAU,SAACC,EAAKF,GAAN,OAAwBH,EAAiBG,IACnDG,eAAe,UACfC,UAAU,UACVC,UAAQ,GAER,kBAACC,EAAA,EAAD,CAAKC,MAAM,WACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,iBACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,cAEf,kBAAC,EAAD,CAAQjB,MAAOM,GACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCnCHY,EAAgB,WASzB,OARAC,qBAAU,WACR,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,OAAQ,EACfH,EAAOI,OAAQ,EACfJ,EAAOK,IAAM,yCACbJ,SAASK,KAAKC,YAAYP,KACzB,IAGD,yBAAKQ,UAAU,OACb,gCACE,yBAAKA,UAAU,kBAEjB,yBAAKC,GAAG,cACNC,iBAAe,2EACfC,iBAAe,gCAGjB,kBAAC,EAAD,QCXYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19b66205.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Groups: React.FC = () => {\n    return <div>See all groups you are a part of here.</div>;\n}","import React from 'react';\n\nexport const Transactions: React.FC = () => {\n    return <div>See your transactions here.</div>;\n}","import React from 'react';\n\nexport const Settings: React.FC = () => {\n    return <div>Update your settings here.</div>;\n}\n","import React, { PropsWithChildren } from 'react';\n\ninterface IProps {\n    index: number;\n};\n\nexport const Panels: React.FC<PropsWithChildren<IProps>> = (props) => {\n    return <>{React.Children.toArray(props.children)[props.index]}</>\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Groups } from '../Groups/Groups';\nimport { Transactions } from '../Transactions/Transactions';\nimport { Settings } from '../Settings/Settings';\nimport { Panels } from './Panels';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },        \n});\n\ninterface IState {\n    selectedValue: number;\n};\n\nexport const NavigationBar: React.FC = () => {\n    const [selectedValue, setSelectedValue] = useState(0);\n\n    return (\n        <Paper>\n            <Tabs\n                value={selectedValue}\n                onChange={(evt, value: number) => setSelectedValue(value)}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                centered\n            >\n                <Tab label=\"Groups\" />\n                <Tab label=\"Transactions\" />\n                <Tab label=\"Settings\" />\n            </Tabs>\n            <Panels index={selectedValue}>\n                <Groups />\n                <Transactions />\n                <Settings />\n            </Panels>\n        </Paper>\n    );\n}","import React, { useEffect } from 'react';\nimport logo from './logo.svg';\nimport { NavigationBar } from './components/Navigation/NavigationBar';\n\nexport const App: React.FC = () => {\n    useEffect(() => {\n      const script = document.createElement(\"script\");\n      script.async = true;\n      script.defer = true;\n      script.src = \"https://accounts.google.com/gsi/client\";\n      document.body.appendChild(script);\n    }, [] /* An empty dependencies array means that we will only update one time. */);\n\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"g_id_signout\">{/* Signout is implemented here. */}</div>\n        </header>\n        <div id=\"g_id_onload\"\n          data-client_id=\"962633347992-tbgvt8rcmnhdp5tlfm2hs1av8bkfc03n.apps.googleusercontent.com\"\n          data-login_uri=\"http://localhost:8080/oauth\">\n        </div>\n\n        <NavigationBar />\n      </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}